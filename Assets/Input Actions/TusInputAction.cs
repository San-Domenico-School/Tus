//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Input Actions/TusInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TusInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TusInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TusInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerControl_RightHanded"",
            ""id"": ""23a41b37-3d75-4734-b4c3-a943be1aba85"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""793adac1-6ce2-4a79-9cf4-92b13856d7c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2e645705-bac2-4ae6-bf73-47acb7a1b42c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29b21090-3507-4123-add8-60852345a56b"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b962e37-dae4-4f09-a421-905fe5ff3d01"",
                    ""path"": ""<XRController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControl_LeftHanded"",
            ""id"": ""c1d9a146-5971-431e-8c90-0e4aadd5273e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd751454-8d09-486f-bcd1-cebe63e7f2b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4f17c9ab-21de-4c61-9411-a6700b18957b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a191dd5-cd65-4589-a51e-30c6abc3907c"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd7fdc54-d05c-4000-8c1b-69acdd91745e"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl_RightHanded"",
            ""id"": ""f62dc844-942f-4c05-be29-81e2d4c6335d"",
            ""actions"": [
                {
                    ""name"": ""CameraZoneMove"",
                    ""type"": ""Value"",
                    ""id"": ""66e4bc24-520a-4689-a696-7c70ca58fd7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb167684-22d4-42de-89ab-8b1376d97964"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl_LeftHanded"",
            ""id"": ""e87b4d35-731a-461b-89d7-9d3b9a31c8b6"",
            ""actions"": [
                {
                    ""name"": ""CameraZoneMove"",
                    ""type"": ""Value"",
                    ""id"": ""aef8e8c4-bd98-4d58-a829-99a3e9070123"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""73b70169-5a62-4c30-a17f-2b7c939bcfcb"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DominantArm_RightHanded"",
            ""id"": ""87e75e0d-6960-4ce2-82b3-b0a4f8fa3192"",
            ""actions"": [
                {
                    ""name"": ""ObjectInteract"",
                    ""type"": ""Button"",
                    ""id"": ""4e028450-0daa-4d29-9f19-0a472e13e572"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Paint"",
                    ""type"": ""Value"",
                    ""id"": ""4c8c88a8-c8fc-4961-aa43-d55f827d7d0b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GrabColor"",
                    ""type"": ""Button"",
                    ""id"": ""45632db3-bfcd-498c-8749-2ee90529cb72"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""96f2ba78-bb84-45a2-b0f9-b16efdb3ebd2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d441e861-6090-43a0-b758-e96194bb9c45"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5f02631-5ef8-4b90-a4f4-ba2a3ca87252"",
                    ""path"": ""<OculusTouchController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f67d9f34-4461-43b2-9c1d-2f0c0fe558ca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07cb2f07-3cd7-46b8-9040-090c982d1790"",
                    ""path"": ""<XRController>{RightHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9edd979a-a180-481d-bb51-eb9960db903a"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DominantArm_LeftHanded"",
            ""id"": ""cdd647e7-a4d2-4d8a-9a98-a88f519c43e6"",
            ""actions"": [
                {
                    ""name"": ""ObjectInteract"",
                    ""type"": ""Button"",
                    ""id"": ""e9b1975f-ec20-491d-81f4-e78994d9dca9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Paint"",
                    ""type"": ""Button"",
                    ""id"": ""6b6cf42e-9ea3-4f29-99c7-8ca33ce17088"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabColor"",
                    ""type"": ""Button"",
                    ""id"": ""d684c8fb-de59-43cf-8f08-f0fca839fada"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""764c90a0-c474-4034-8c2a-94ba287abbf8"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ObjectInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dab4d40-167e-4ede-9d9d-39ec9b28a6a4"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f280ea0f-45d5-4767-9279-024d224e2d99"",
                    ""path"": ""<XRController>{LeftHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NonDominantArm_RightHanded"",
            ""id"": ""081678a1-30b9-4585-a9ab-542bae871ac9"",
            ""actions"": [
                {
                    ""name"": ""BrushResize"",
                    ""type"": ""Button"",
                    ""id"": ""94e53f24-9f26-47d8-be7b-68fc5f9f4407"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7e2876e-21e5-4747-b2ed-eef180b380ba"",
                    ""path"": ""<XRController>{LeftHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrushResize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NonDominantArm_LeftHanded"",
            ""id"": ""0d61c47c-7e9d-4ac8-baca-c82af868c6ee"",
            ""actions"": [
                {
                    ""name"": ""BrushResize"",
                    ""type"": ""Button"",
                    ""id"": ""a1e07575-cdc7-48b4-8e2d-108e65071c7d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37cdf0a1-5caf-48de-bfbd-f39a8228e21a"",
                    ""path"": ""<XRController>{RightHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrushResize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UINavigate_RightHanded"",
            ""id"": ""592a2632-6b30-40ec-812d-6e38f2b99e13"",
            ""actions"": [
                {
                    ""name"": ""PauseToggle"",
                    ""type"": ""Button"",
                    ""id"": ""213cb876-0ca5-4b3a-aedf-6b04990f3266"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InterfaceInteract"",
                    ""type"": ""Button"",
                    ""id"": ""00420afc-fd6e-468e-a726-206507ce431e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""643e154a-7f50-492b-9c3c-5d9b5ab4a20b"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab233eb-a2bc-4f38-bbcc-ece404c9a482"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InterfaceInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UINavigate_LeftHanded"",
            ""id"": ""60f6e6e3-4af0-4481-ad12-5449ef98c572"",
            ""actions"": [
                {
                    ""name"": ""PauseToggle"",
                    ""type"": ""Button"",
                    ""id"": ""c91edaf7-64eb-4d02-a165-083a5621dd70"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InterfaceInteract"",
                    ""type"": ""Button"",
                    ""id"": ""44845d45-7ccf-4748-a592-3a08f124dec8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3907b077-6e8d-45e6-a0f2-871dbf3fbb71"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9adae655-692c-42c3-8c3f-2ab8ec068283"",
                    ""path"": ""<XRController>{LeftHand}/triggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InterfaceInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Headset"",
            ""id"": ""554f008d-863e-4af2-937d-7764bcfa43ae"",
            ""actions"": [
                {
                    ""name"": ""HeadsetRotation"",
                    ""type"": ""Value"",
                    ""id"": ""cf4ddd1e-2c36-488c-b402-df187c103e83"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69d4fbdf-e5a6-4eb8-93de-f32985d3e9bb"",
                    ""path"": ""<OculusHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadsetRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Brush"",
            ""id"": ""00cae094-d0b7-4f32-b0f2-80a7d7788172"",
            ""actions"": [
                {
                    ""name"": ""RightHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""f151f2a3-3b3a-46f4-b008-a397c208e0b4"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandLocation"",
                    ""type"": ""Value"",
                    ""id"": ""e277b63c-5970-423c-a203-52b2e968fa1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a11b0740-55a2-4b65-8bc5-97fb6b70d99b"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79f81fed-3ded-4b74-856d-aed4c2c57191"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Palette"",
            ""id"": ""eff2a565-32be-40d5-888c-20f3643934ec"",
            ""actions"": [
                {
                    ""name"": ""LeftHandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""c7077929-8dcb-47d4-b9af-d9843b5729fe"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandLocation"",
                    ""type"": ""Value"",
                    ""id"": ""3a722f95-b42b-4421-aad1-d0eb2b685e47"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1827fa0a-3e4d-494d-bf2c-2c50c8e2a018"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6fb7bfc-853a-4bf5-9073-09a757067e90"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControl_RightHanded
        m_PlayerControl_RightHanded = asset.FindActionMap("PlayerControl_RightHanded", throwIfNotFound: true);
        m_PlayerControl_RightHanded_Move = m_PlayerControl_RightHanded.FindAction("Move", throwIfNotFound: true);
        m_PlayerControl_RightHanded_Jump = m_PlayerControl_RightHanded.FindAction("Jump", throwIfNotFound: true);
        // PlayerControl_LeftHanded
        m_PlayerControl_LeftHanded = asset.FindActionMap("PlayerControl_LeftHanded", throwIfNotFound: true);
        m_PlayerControl_LeftHanded_Move = m_PlayerControl_LeftHanded.FindAction("Move", throwIfNotFound: true);
        m_PlayerControl_LeftHanded_Jump = m_PlayerControl_LeftHanded.FindAction("Jump", throwIfNotFound: true);
        // CameraControl_RightHanded
        m_CameraControl_RightHanded = asset.FindActionMap("CameraControl_RightHanded", throwIfNotFound: true);
        m_CameraControl_RightHanded_CameraZoneMove = m_CameraControl_RightHanded.FindAction("CameraZoneMove", throwIfNotFound: true);
        // CameraControl_LeftHanded
        m_CameraControl_LeftHanded = asset.FindActionMap("CameraControl_LeftHanded", throwIfNotFound: true);
        m_CameraControl_LeftHanded_CameraZoneMove = m_CameraControl_LeftHanded.FindAction("CameraZoneMove", throwIfNotFound: true);
        // DominantArm_RightHanded
        m_DominantArm_RightHanded = asset.FindActionMap("DominantArm_RightHanded", throwIfNotFound: true);
        m_DominantArm_RightHanded_ObjectInteract = m_DominantArm_RightHanded.FindAction("ObjectInteract", throwIfNotFound: true);
        m_DominantArm_RightHanded_Paint = m_DominantArm_RightHanded.FindAction("Paint", throwIfNotFound: true);
        m_DominantArm_RightHanded_GrabColor = m_DominantArm_RightHanded.FindAction("GrabColor", throwIfNotFound: true);
        m_DominantArm_RightHanded_Save = m_DominantArm_RightHanded.FindAction("Save", throwIfNotFound: true);
        // DominantArm_LeftHanded
        m_DominantArm_LeftHanded = asset.FindActionMap("DominantArm_LeftHanded", throwIfNotFound: true);
        m_DominantArm_LeftHanded_ObjectInteract = m_DominantArm_LeftHanded.FindAction("ObjectInteract", throwIfNotFound: true);
        m_DominantArm_LeftHanded_Paint = m_DominantArm_LeftHanded.FindAction("Paint", throwIfNotFound: true);
        m_DominantArm_LeftHanded_GrabColor = m_DominantArm_LeftHanded.FindAction("GrabColor", throwIfNotFound: true);
        // NonDominantArm_RightHanded
        m_NonDominantArm_RightHanded = asset.FindActionMap("NonDominantArm_RightHanded", throwIfNotFound: true);
        m_NonDominantArm_RightHanded_BrushResize = m_NonDominantArm_RightHanded.FindAction("BrushResize", throwIfNotFound: true);
        // NonDominantArm_LeftHanded
        m_NonDominantArm_LeftHanded = asset.FindActionMap("NonDominantArm_LeftHanded", throwIfNotFound: true);
        m_NonDominantArm_LeftHanded_BrushResize = m_NonDominantArm_LeftHanded.FindAction("BrushResize", throwIfNotFound: true);
        // UINavigate_RightHanded
        m_UINavigate_RightHanded = asset.FindActionMap("UINavigate_RightHanded", throwIfNotFound: true);
        m_UINavigate_RightHanded_PauseToggle = m_UINavigate_RightHanded.FindAction("PauseToggle", throwIfNotFound: true);
        m_UINavigate_RightHanded_InterfaceInteract = m_UINavigate_RightHanded.FindAction("InterfaceInteract", throwIfNotFound: true);
        // UINavigate_LeftHanded
        m_UINavigate_LeftHanded = asset.FindActionMap("UINavigate_LeftHanded", throwIfNotFound: true);
        m_UINavigate_LeftHanded_PauseToggle = m_UINavigate_LeftHanded.FindAction("PauseToggle", throwIfNotFound: true);
        m_UINavigate_LeftHanded_InterfaceInteract = m_UINavigate_LeftHanded.FindAction("InterfaceInteract", throwIfNotFound: true);
        // Headset
        m_Headset = asset.FindActionMap("Headset", throwIfNotFound: true);
        m_Headset_HeadsetRotation = m_Headset.FindAction("HeadsetRotation", throwIfNotFound: true);
        // Brush
        m_Brush = asset.FindActionMap("Brush", throwIfNotFound: true);
        m_Brush_RightHandRotation = m_Brush.FindAction("RightHandRotation", throwIfNotFound: true);
        m_Brush_RightHandLocation = m_Brush.FindAction("RightHandLocation", throwIfNotFound: true);
        // Palette
        m_Palette = asset.FindActionMap("Palette", throwIfNotFound: true);
        m_Palette_LeftHandRotation = m_Palette.FindAction("LeftHandRotation", throwIfNotFound: true);
        m_Palette_LeftHandLocation = m_Palette.FindAction("LeftHandLocation", throwIfNotFound: true);
    }

    ~@TusInputAction()
    {
        UnityEngine.Debug.Assert(!m_PlayerControl_RightHanded.enabled, "This will cause a leak and performance issues, TusInputAction.PlayerControl_RightHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerControl_LeftHanded.enabled, "This will cause a leak and performance issues, TusInputAction.PlayerControl_LeftHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CameraControl_RightHanded.enabled, "This will cause a leak and performance issues, TusInputAction.CameraControl_RightHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CameraControl_LeftHanded.enabled, "This will cause a leak and performance issues, TusInputAction.CameraControl_LeftHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DominantArm_RightHanded.enabled, "This will cause a leak and performance issues, TusInputAction.DominantArm_RightHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DominantArm_LeftHanded.enabled, "This will cause a leak and performance issues, TusInputAction.DominantArm_LeftHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_NonDominantArm_RightHanded.enabled, "This will cause a leak and performance issues, TusInputAction.NonDominantArm_RightHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_NonDominantArm_LeftHanded.enabled, "This will cause a leak and performance issues, TusInputAction.NonDominantArm_LeftHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UINavigate_RightHanded.enabled, "This will cause a leak and performance issues, TusInputAction.UINavigate_RightHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UINavigate_LeftHanded.enabled, "This will cause a leak and performance issues, TusInputAction.UINavigate_LeftHanded.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Headset.enabled, "This will cause a leak and performance issues, TusInputAction.Headset.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Brush.enabled, "This will cause a leak and performance issues, TusInputAction.Brush.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Palette.enabled, "This will cause a leak and performance issues, TusInputAction.Palette.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControl_RightHanded
    private readonly InputActionMap m_PlayerControl_RightHanded;
    private List<IPlayerControl_RightHandedActions> m_PlayerControl_RightHandedActionsCallbackInterfaces = new List<IPlayerControl_RightHandedActions>();
    private readonly InputAction m_PlayerControl_RightHanded_Move;
    private readonly InputAction m_PlayerControl_RightHanded_Jump;
    public struct PlayerControl_RightHandedActions
    {
        private @TusInputAction m_Wrapper;
        public PlayerControl_RightHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControl_RightHanded_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerControl_RightHanded_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl_RightHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControl_RightHandedActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControl_RightHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControl_RightHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControl_RightHandedActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerControl_RightHandedActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerControl_RightHandedActions instance)
        {
            if (m_Wrapper.m_PlayerControl_RightHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControl_RightHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControl_RightHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControl_RightHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControl_RightHandedActions @PlayerControl_RightHanded => new PlayerControl_RightHandedActions(this);

    // PlayerControl_LeftHanded
    private readonly InputActionMap m_PlayerControl_LeftHanded;
    private List<IPlayerControl_LeftHandedActions> m_PlayerControl_LeftHandedActionsCallbackInterfaces = new List<IPlayerControl_LeftHandedActions>();
    private readonly InputAction m_PlayerControl_LeftHanded_Move;
    private readonly InputAction m_PlayerControl_LeftHanded_Jump;
    public struct PlayerControl_LeftHandedActions
    {
        private @TusInputAction m_Wrapper;
        public PlayerControl_LeftHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControl_LeftHanded_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerControl_LeftHanded_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl_LeftHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControl_LeftHandedActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControl_LeftHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControl_LeftHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControl_LeftHandedActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerControl_LeftHandedActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerControl_LeftHandedActions instance)
        {
            if (m_Wrapper.m_PlayerControl_LeftHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControl_LeftHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControl_LeftHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControl_LeftHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControl_LeftHandedActions @PlayerControl_LeftHanded => new PlayerControl_LeftHandedActions(this);

    // CameraControl_RightHanded
    private readonly InputActionMap m_CameraControl_RightHanded;
    private List<ICameraControl_RightHandedActions> m_CameraControl_RightHandedActionsCallbackInterfaces = new List<ICameraControl_RightHandedActions>();
    private readonly InputAction m_CameraControl_RightHanded_CameraZoneMove;
    public struct CameraControl_RightHandedActions
    {
        private @TusInputAction m_Wrapper;
        public CameraControl_RightHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraZoneMove => m_Wrapper.m_CameraControl_RightHanded_CameraZoneMove;
        public InputActionMap Get() { return m_Wrapper.m_CameraControl_RightHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControl_RightHandedActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControl_RightHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControl_RightHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControl_RightHandedActionsCallbackInterfaces.Add(instance);
            @CameraZoneMove.started += instance.OnCameraZoneMove;
            @CameraZoneMove.performed += instance.OnCameraZoneMove;
            @CameraZoneMove.canceled += instance.OnCameraZoneMove;
        }

        private void UnregisterCallbacks(ICameraControl_RightHandedActions instance)
        {
            @CameraZoneMove.started -= instance.OnCameraZoneMove;
            @CameraZoneMove.performed -= instance.OnCameraZoneMove;
            @CameraZoneMove.canceled -= instance.OnCameraZoneMove;
        }

        public void RemoveCallbacks(ICameraControl_RightHandedActions instance)
        {
            if (m_Wrapper.m_CameraControl_RightHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControl_RightHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControl_RightHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControl_RightHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControl_RightHandedActions @CameraControl_RightHanded => new CameraControl_RightHandedActions(this);

    // CameraControl_LeftHanded
    private readonly InputActionMap m_CameraControl_LeftHanded;
    private List<ICameraControl_LeftHandedActions> m_CameraControl_LeftHandedActionsCallbackInterfaces = new List<ICameraControl_LeftHandedActions>();
    private readonly InputAction m_CameraControl_LeftHanded_CameraZoneMove;
    public struct CameraControl_LeftHandedActions
    {
        private @TusInputAction m_Wrapper;
        public CameraControl_LeftHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraZoneMove => m_Wrapper.m_CameraControl_LeftHanded_CameraZoneMove;
        public InputActionMap Get() { return m_Wrapper.m_CameraControl_LeftHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControl_LeftHandedActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControl_LeftHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControl_LeftHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControl_LeftHandedActionsCallbackInterfaces.Add(instance);
            @CameraZoneMove.started += instance.OnCameraZoneMove;
            @CameraZoneMove.performed += instance.OnCameraZoneMove;
            @CameraZoneMove.canceled += instance.OnCameraZoneMove;
        }

        private void UnregisterCallbacks(ICameraControl_LeftHandedActions instance)
        {
            @CameraZoneMove.started -= instance.OnCameraZoneMove;
            @CameraZoneMove.performed -= instance.OnCameraZoneMove;
            @CameraZoneMove.canceled -= instance.OnCameraZoneMove;
        }

        public void RemoveCallbacks(ICameraControl_LeftHandedActions instance)
        {
            if (m_Wrapper.m_CameraControl_LeftHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControl_LeftHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControl_LeftHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControl_LeftHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControl_LeftHandedActions @CameraControl_LeftHanded => new CameraControl_LeftHandedActions(this);

    // DominantArm_RightHanded
    private readonly InputActionMap m_DominantArm_RightHanded;
    private List<IDominantArm_RightHandedActions> m_DominantArm_RightHandedActionsCallbackInterfaces = new List<IDominantArm_RightHandedActions>();
    private readonly InputAction m_DominantArm_RightHanded_ObjectInteract;
    private readonly InputAction m_DominantArm_RightHanded_Paint;
    private readonly InputAction m_DominantArm_RightHanded_GrabColor;
    private readonly InputAction m_DominantArm_RightHanded_Save;
    public struct DominantArm_RightHandedActions
    {
        private @TusInputAction m_Wrapper;
        public DominantArm_RightHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ObjectInteract => m_Wrapper.m_DominantArm_RightHanded_ObjectInteract;
        public InputAction @Paint => m_Wrapper.m_DominantArm_RightHanded_Paint;
        public InputAction @GrabColor => m_Wrapper.m_DominantArm_RightHanded_GrabColor;
        public InputAction @Save => m_Wrapper.m_DominantArm_RightHanded_Save;
        public InputActionMap Get() { return m_Wrapper.m_DominantArm_RightHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DominantArm_RightHandedActions set) { return set.Get(); }
        public void AddCallbacks(IDominantArm_RightHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_DominantArm_RightHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DominantArm_RightHandedActionsCallbackInterfaces.Add(instance);
            @ObjectInteract.started += instance.OnObjectInteract;
            @ObjectInteract.performed += instance.OnObjectInteract;
            @ObjectInteract.canceled += instance.OnObjectInteract;
            @Paint.started += instance.OnPaint;
            @Paint.performed += instance.OnPaint;
            @Paint.canceled += instance.OnPaint;
            @GrabColor.started += instance.OnGrabColor;
            @GrabColor.performed += instance.OnGrabColor;
            @GrabColor.canceled += instance.OnGrabColor;
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
        }

        private void UnregisterCallbacks(IDominantArm_RightHandedActions instance)
        {
            @ObjectInteract.started -= instance.OnObjectInteract;
            @ObjectInteract.performed -= instance.OnObjectInteract;
            @ObjectInteract.canceled -= instance.OnObjectInteract;
            @Paint.started -= instance.OnPaint;
            @Paint.performed -= instance.OnPaint;
            @Paint.canceled -= instance.OnPaint;
            @GrabColor.started -= instance.OnGrabColor;
            @GrabColor.performed -= instance.OnGrabColor;
            @GrabColor.canceled -= instance.OnGrabColor;
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
        }

        public void RemoveCallbacks(IDominantArm_RightHandedActions instance)
        {
            if (m_Wrapper.m_DominantArm_RightHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDominantArm_RightHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_DominantArm_RightHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DominantArm_RightHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DominantArm_RightHandedActions @DominantArm_RightHanded => new DominantArm_RightHandedActions(this);

    // DominantArm_LeftHanded
    private readonly InputActionMap m_DominantArm_LeftHanded;
    private List<IDominantArm_LeftHandedActions> m_DominantArm_LeftHandedActionsCallbackInterfaces = new List<IDominantArm_LeftHandedActions>();
    private readonly InputAction m_DominantArm_LeftHanded_ObjectInteract;
    private readonly InputAction m_DominantArm_LeftHanded_Paint;
    private readonly InputAction m_DominantArm_LeftHanded_GrabColor;
    public struct DominantArm_LeftHandedActions
    {
        private @TusInputAction m_Wrapper;
        public DominantArm_LeftHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ObjectInteract => m_Wrapper.m_DominantArm_LeftHanded_ObjectInteract;
        public InputAction @Paint => m_Wrapper.m_DominantArm_LeftHanded_Paint;
        public InputAction @GrabColor => m_Wrapper.m_DominantArm_LeftHanded_GrabColor;
        public InputActionMap Get() { return m_Wrapper.m_DominantArm_LeftHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DominantArm_LeftHandedActions set) { return set.Get(); }
        public void AddCallbacks(IDominantArm_LeftHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_DominantArm_LeftHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DominantArm_LeftHandedActionsCallbackInterfaces.Add(instance);
            @ObjectInteract.started += instance.OnObjectInteract;
            @ObjectInteract.performed += instance.OnObjectInteract;
            @ObjectInteract.canceled += instance.OnObjectInteract;
            @Paint.started += instance.OnPaint;
            @Paint.performed += instance.OnPaint;
            @Paint.canceled += instance.OnPaint;
            @GrabColor.started += instance.OnGrabColor;
            @GrabColor.performed += instance.OnGrabColor;
            @GrabColor.canceled += instance.OnGrabColor;
        }

        private void UnregisterCallbacks(IDominantArm_LeftHandedActions instance)
        {
            @ObjectInteract.started -= instance.OnObjectInteract;
            @ObjectInteract.performed -= instance.OnObjectInteract;
            @ObjectInteract.canceled -= instance.OnObjectInteract;
            @Paint.started -= instance.OnPaint;
            @Paint.performed -= instance.OnPaint;
            @Paint.canceled -= instance.OnPaint;
            @GrabColor.started -= instance.OnGrabColor;
            @GrabColor.performed -= instance.OnGrabColor;
            @GrabColor.canceled -= instance.OnGrabColor;
        }

        public void RemoveCallbacks(IDominantArm_LeftHandedActions instance)
        {
            if (m_Wrapper.m_DominantArm_LeftHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDominantArm_LeftHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_DominantArm_LeftHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DominantArm_LeftHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DominantArm_LeftHandedActions @DominantArm_LeftHanded => new DominantArm_LeftHandedActions(this);

    // NonDominantArm_RightHanded
    private readonly InputActionMap m_NonDominantArm_RightHanded;
    private List<INonDominantArm_RightHandedActions> m_NonDominantArm_RightHandedActionsCallbackInterfaces = new List<INonDominantArm_RightHandedActions>();
    private readonly InputAction m_NonDominantArm_RightHanded_BrushResize;
    public struct NonDominantArm_RightHandedActions
    {
        private @TusInputAction m_Wrapper;
        public NonDominantArm_RightHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @BrushResize => m_Wrapper.m_NonDominantArm_RightHanded_BrushResize;
        public InputActionMap Get() { return m_Wrapper.m_NonDominantArm_RightHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NonDominantArm_RightHandedActions set) { return set.Get(); }
        public void AddCallbacks(INonDominantArm_RightHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_NonDominantArm_RightHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NonDominantArm_RightHandedActionsCallbackInterfaces.Add(instance);
            @BrushResize.started += instance.OnBrushResize;
            @BrushResize.performed += instance.OnBrushResize;
            @BrushResize.canceled += instance.OnBrushResize;
        }

        private void UnregisterCallbacks(INonDominantArm_RightHandedActions instance)
        {
            @BrushResize.started -= instance.OnBrushResize;
            @BrushResize.performed -= instance.OnBrushResize;
            @BrushResize.canceled -= instance.OnBrushResize;
        }

        public void RemoveCallbacks(INonDominantArm_RightHandedActions instance)
        {
            if (m_Wrapper.m_NonDominantArm_RightHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INonDominantArm_RightHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_NonDominantArm_RightHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NonDominantArm_RightHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NonDominantArm_RightHandedActions @NonDominantArm_RightHanded => new NonDominantArm_RightHandedActions(this);

    // NonDominantArm_LeftHanded
    private readonly InputActionMap m_NonDominantArm_LeftHanded;
    private List<INonDominantArm_LeftHandedActions> m_NonDominantArm_LeftHandedActionsCallbackInterfaces = new List<INonDominantArm_LeftHandedActions>();
    private readonly InputAction m_NonDominantArm_LeftHanded_BrushResize;
    public struct NonDominantArm_LeftHandedActions
    {
        private @TusInputAction m_Wrapper;
        public NonDominantArm_LeftHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @BrushResize => m_Wrapper.m_NonDominantArm_LeftHanded_BrushResize;
        public InputActionMap Get() { return m_Wrapper.m_NonDominantArm_LeftHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NonDominantArm_LeftHandedActions set) { return set.Get(); }
        public void AddCallbacks(INonDominantArm_LeftHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_NonDominantArm_LeftHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NonDominantArm_LeftHandedActionsCallbackInterfaces.Add(instance);
            @BrushResize.started += instance.OnBrushResize;
            @BrushResize.performed += instance.OnBrushResize;
            @BrushResize.canceled += instance.OnBrushResize;
        }

        private void UnregisterCallbacks(INonDominantArm_LeftHandedActions instance)
        {
            @BrushResize.started -= instance.OnBrushResize;
            @BrushResize.performed -= instance.OnBrushResize;
            @BrushResize.canceled -= instance.OnBrushResize;
        }

        public void RemoveCallbacks(INonDominantArm_LeftHandedActions instance)
        {
            if (m_Wrapper.m_NonDominantArm_LeftHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INonDominantArm_LeftHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_NonDominantArm_LeftHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NonDominantArm_LeftHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NonDominantArm_LeftHandedActions @NonDominantArm_LeftHanded => new NonDominantArm_LeftHandedActions(this);

    // UINavigate_RightHanded
    private readonly InputActionMap m_UINavigate_RightHanded;
    private List<IUINavigate_RightHandedActions> m_UINavigate_RightHandedActionsCallbackInterfaces = new List<IUINavigate_RightHandedActions>();
    private readonly InputAction m_UINavigate_RightHanded_PauseToggle;
    private readonly InputAction m_UINavigate_RightHanded_InterfaceInteract;
    public struct UINavigate_RightHandedActions
    {
        private @TusInputAction m_Wrapper;
        public UINavigate_RightHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseToggle => m_Wrapper.m_UINavigate_RightHanded_PauseToggle;
        public InputAction @InterfaceInteract => m_Wrapper.m_UINavigate_RightHanded_InterfaceInteract;
        public InputActionMap Get() { return m_Wrapper.m_UINavigate_RightHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UINavigate_RightHandedActions set) { return set.Get(); }
        public void AddCallbacks(IUINavigate_RightHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_UINavigate_RightHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UINavigate_RightHandedActionsCallbackInterfaces.Add(instance);
            @PauseToggle.started += instance.OnPauseToggle;
            @PauseToggle.performed += instance.OnPauseToggle;
            @PauseToggle.canceled += instance.OnPauseToggle;
            @InterfaceInteract.started += instance.OnInterfaceInteract;
            @InterfaceInteract.performed += instance.OnInterfaceInteract;
            @InterfaceInteract.canceled += instance.OnInterfaceInteract;
        }

        private void UnregisterCallbacks(IUINavigate_RightHandedActions instance)
        {
            @PauseToggle.started -= instance.OnPauseToggle;
            @PauseToggle.performed -= instance.OnPauseToggle;
            @PauseToggle.canceled -= instance.OnPauseToggle;
            @InterfaceInteract.started -= instance.OnInterfaceInteract;
            @InterfaceInteract.performed -= instance.OnInterfaceInteract;
            @InterfaceInteract.canceled -= instance.OnInterfaceInteract;
        }

        public void RemoveCallbacks(IUINavigate_RightHandedActions instance)
        {
            if (m_Wrapper.m_UINavigate_RightHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUINavigate_RightHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_UINavigate_RightHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UINavigate_RightHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UINavigate_RightHandedActions @UINavigate_RightHanded => new UINavigate_RightHandedActions(this);

    // UINavigate_LeftHanded
    private readonly InputActionMap m_UINavigate_LeftHanded;
    private List<IUINavigate_LeftHandedActions> m_UINavigate_LeftHandedActionsCallbackInterfaces = new List<IUINavigate_LeftHandedActions>();
    private readonly InputAction m_UINavigate_LeftHanded_PauseToggle;
    private readonly InputAction m_UINavigate_LeftHanded_InterfaceInteract;
    public struct UINavigate_LeftHandedActions
    {
        private @TusInputAction m_Wrapper;
        public UINavigate_LeftHandedActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseToggle => m_Wrapper.m_UINavigate_LeftHanded_PauseToggle;
        public InputAction @InterfaceInteract => m_Wrapper.m_UINavigate_LeftHanded_InterfaceInteract;
        public InputActionMap Get() { return m_Wrapper.m_UINavigate_LeftHanded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UINavigate_LeftHandedActions set) { return set.Get(); }
        public void AddCallbacks(IUINavigate_LeftHandedActions instance)
        {
            if (instance == null || m_Wrapper.m_UINavigate_LeftHandedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UINavigate_LeftHandedActionsCallbackInterfaces.Add(instance);
            @PauseToggle.started += instance.OnPauseToggle;
            @PauseToggle.performed += instance.OnPauseToggle;
            @PauseToggle.canceled += instance.OnPauseToggle;
            @InterfaceInteract.started += instance.OnInterfaceInteract;
            @InterfaceInteract.performed += instance.OnInterfaceInteract;
            @InterfaceInteract.canceled += instance.OnInterfaceInteract;
        }

        private void UnregisterCallbacks(IUINavigate_LeftHandedActions instance)
        {
            @PauseToggle.started -= instance.OnPauseToggle;
            @PauseToggle.performed -= instance.OnPauseToggle;
            @PauseToggle.canceled -= instance.OnPauseToggle;
            @InterfaceInteract.started -= instance.OnInterfaceInteract;
            @InterfaceInteract.performed -= instance.OnInterfaceInteract;
            @InterfaceInteract.canceled -= instance.OnInterfaceInteract;
        }

        public void RemoveCallbacks(IUINavigate_LeftHandedActions instance)
        {
            if (m_Wrapper.m_UINavigate_LeftHandedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUINavigate_LeftHandedActions instance)
        {
            foreach (var item in m_Wrapper.m_UINavigate_LeftHandedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UINavigate_LeftHandedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UINavigate_LeftHandedActions @UINavigate_LeftHanded => new UINavigate_LeftHandedActions(this);

    // Headset
    private readonly InputActionMap m_Headset;
    private List<IHeadsetActions> m_HeadsetActionsCallbackInterfaces = new List<IHeadsetActions>();
    private readonly InputAction m_Headset_HeadsetRotation;
    public struct HeadsetActions
    {
        private @TusInputAction m_Wrapper;
        public HeadsetActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @HeadsetRotation => m_Wrapper.m_Headset_HeadsetRotation;
        public InputActionMap Get() { return m_Wrapper.m_Headset; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadsetActions set) { return set.Get(); }
        public void AddCallbacks(IHeadsetActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadsetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Add(instance);
            @HeadsetRotation.started += instance.OnHeadsetRotation;
            @HeadsetRotation.performed += instance.OnHeadsetRotation;
            @HeadsetRotation.canceled += instance.OnHeadsetRotation;
        }

        private void UnregisterCallbacks(IHeadsetActions instance)
        {
            @HeadsetRotation.started -= instance.OnHeadsetRotation;
            @HeadsetRotation.performed -= instance.OnHeadsetRotation;
            @HeadsetRotation.canceled -= instance.OnHeadsetRotation;
        }

        public void RemoveCallbacks(IHeadsetActions instance)
        {
            if (m_Wrapper.m_HeadsetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadsetActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadsetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadsetActions @Headset => new HeadsetActions(this);

    // Brush
    private readonly InputActionMap m_Brush;
    private List<IBrushActions> m_BrushActionsCallbackInterfaces = new List<IBrushActions>();
    private readonly InputAction m_Brush_RightHandRotation;
    private readonly InputAction m_Brush_RightHandLocation;
    public struct BrushActions
    {
        private @TusInputAction m_Wrapper;
        public BrushActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightHandRotation => m_Wrapper.m_Brush_RightHandRotation;
        public InputAction @RightHandLocation => m_Wrapper.m_Brush_RightHandLocation;
        public InputActionMap Get() { return m_Wrapper.m_Brush; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BrushActions set) { return set.Get(); }
        public void AddCallbacks(IBrushActions instance)
        {
            if (instance == null || m_Wrapper.m_BrushActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BrushActionsCallbackInterfaces.Add(instance);
            @RightHandRotation.started += instance.OnRightHandRotation;
            @RightHandRotation.performed += instance.OnRightHandRotation;
            @RightHandRotation.canceled += instance.OnRightHandRotation;
            @RightHandLocation.started += instance.OnRightHandLocation;
            @RightHandLocation.performed += instance.OnRightHandLocation;
            @RightHandLocation.canceled += instance.OnRightHandLocation;
        }

        private void UnregisterCallbacks(IBrushActions instance)
        {
            @RightHandRotation.started -= instance.OnRightHandRotation;
            @RightHandRotation.performed -= instance.OnRightHandRotation;
            @RightHandRotation.canceled -= instance.OnRightHandRotation;
            @RightHandLocation.started -= instance.OnRightHandLocation;
            @RightHandLocation.performed -= instance.OnRightHandLocation;
            @RightHandLocation.canceled -= instance.OnRightHandLocation;
        }

        public void RemoveCallbacks(IBrushActions instance)
        {
            if (m_Wrapper.m_BrushActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBrushActions instance)
        {
            foreach (var item in m_Wrapper.m_BrushActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BrushActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BrushActions @Brush => new BrushActions(this);

    // Palette
    private readonly InputActionMap m_Palette;
    private List<IPaletteActions> m_PaletteActionsCallbackInterfaces = new List<IPaletteActions>();
    private readonly InputAction m_Palette_LeftHandRotation;
    private readonly InputAction m_Palette_LeftHandLocation;
    public struct PaletteActions
    {
        private @TusInputAction m_Wrapper;
        public PaletteActions(@TusInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandRotation => m_Wrapper.m_Palette_LeftHandRotation;
        public InputAction @LeftHandLocation => m_Wrapper.m_Palette_LeftHandLocation;
        public InputActionMap Get() { return m_Wrapper.m_Palette; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaletteActions set) { return set.Get(); }
        public void AddCallbacks(IPaletteActions instance)
        {
            if (instance == null || m_Wrapper.m_PaletteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PaletteActionsCallbackInterfaces.Add(instance);
            @LeftHandRotation.started += instance.OnLeftHandRotation;
            @LeftHandRotation.performed += instance.OnLeftHandRotation;
            @LeftHandRotation.canceled += instance.OnLeftHandRotation;
            @LeftHandLocation.started += instance.OnLeftHandLocation;
            @LeftHandLocation.performed += instance.OnLeftHandLocation;
            @LeftHandLocation.canceled += instance.OnLeftHandLocation;
        }

        private void UnregisterCallbacks(IPaletteActions instance)
        {
            @LeftHandRotation.started -= instance.OnLeftHandRotation;
            @LeftHandRotation.performed -= instance.OnLeftHandRotation;
            @LeftHandRotation.canceled -= instance.OnLeftHandRotation;
            @LeftHandLocation.started -= instance.OnLeftHandLocation;
            @LeftHandLocation.performed -= instance.OnLeftHandLocation;
            @LeftHandLocation.canceled -= instance.OnLeftHandLocation;
        }

        public void RemoveCallbacks(IPaletteActions instance)
        {
            if (m_Wrapper.m_PaletteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPaletteActions instance)
        {
            foreach (var item in m_Wrapper.m_PaletteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PaletteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PaletteActions @Palette => new PaletteActions(this);
    public interface IPlayerControl_RightHandedActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayerControl_LeftHandedActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraControl_RightHandedActions
    {
        void OnCameraZoneMove(InputAction.CallbackContext context);
    }
    public interface ICameraControl_LeftHandedActions
    {
        void OnCameraZoneMove(InputAction.CallbackContext context);
    }
    public interface IDominantArm_RightHandedActions
    {
        void OnObjectInteract(InputAction.CallbackContext context);
        void OnPaint(InputAction.CallbackContext context);
        void OnGrabColor(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
    }
    public interface IDominantArm_LeftHandedActions
    {
        void OnObjectInteract(InputAction.CallbackContext context);
        void OnPaint(InputAction.CallbackContext context);
        void OnGrabColor(InputAction.CallbackContext context);
    }
    public interface INonDominantArm_RightHandedActions
    {
        void OnBrushResize(InputAction.CallbackContext context);
    }
    public interface INonDominantArm_LeftHandedActions
    {
        void OnBrushResize(InputAction.CallbackContext context);
    }
    public interface IUINavigate_RightHandedActions
    {
        void OnPauseToggle(InputAction.CallbackContext context);
        void OnInterfaceInteract(InputAction.CallbackContext context);
    }
    public interface IUINavigate_LeftHandedActions
    {
        void OnPauseToggle(InputAction.CallbackContext context);
        void OnInterfaceInteract(InputAction.CallbackContext context);
    }
    public interface IHeadsetActions
    {
        void OnHeadsetRotation(InputAction.CallbackContext context);
    }
    public interface IBrushActions
    {
        void OnRightHandRotation(InputAction.CallbackContext context);
        void OnRightHandLocation(InputAction.CallbackContext context);
    }
    public interface IPaletteActions
    {
        void OnLeftHandRotation(InputAction.CallbackContext context);
        void OnLeftHandLocation(InputAction.CallbackContext context);
    }
}
